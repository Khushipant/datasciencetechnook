{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1NQPbyLLocFDyjhtOvPNHmuhr92cw-05h","timestamp":1690195462743}],"authorship_tag":"ABX9TyP4RujGEj9Bk/PawNjENNTL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Problem 1\n","In a cricket tournament, based on the outcome of a particular match a team gets following points:\n","\n","wins gets 7 points\n","draws gets 2 points\n","losses gets 0 points\n","Team Aravali plays 8 matches in this tournament. It wins 4 matches, loses 3 matches and draws 1. What is the total number of points gained by the Team austria?\n","\n","\n","a) The outcome variables are defined below?\n","b) Calculate the total points gained by Team Austria and print.\n"],"metadata":{"id":"8HM1ek7RE4xT"}},{"cell_type":"code","source":["number_of_wins = 4\n","number_of_draws = 1\n","number_of_losses = 3\n","total_points = (number_of_wins * 7) + (number_of_draws * 2) + (number_of_losses * 0)\n","print(\"Total points gained by Team Austria:\", total_points)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LxJMn_iDC7oE","executionInfo":{"status":"ok","timestamp":1690037232690,"user_tz":-330,"elapsed":27,"user":{"displayName":"khushi pant","userId":"00791529304222923768"}},"outputId":"44c8bedc-5208-41b6-aaaf-42bb003420cd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Total points gained by Team Austria: 30\n"]}]},{"cell_type":"markdown","source":["Problem 2\n","Root of a function  f(x)  is defined as the value  x  where  f(x)=0\n","Consider a quadratic function  f(x)=x2+3x−4\n","Find the value of the function  f(x)  at points  x=7,x=−1,x=1 .\n","  a)Calculate the value of the function f(x) at x = 2.\n","  b) Calculate the value of the function f(x) at x = 1\n","\n"],"metadata":{"id":"SvZbki1uFVi_"}},{"cell_type":"code","source":["def f(x):\n","    return x**2 + 3*x - 4\n","\n","x1 = 2\n","result1 = f(x1)\n","print(\"f(\", x1, \") =\", result1)\n","\n","\n","x2 = 1\n","result2 = f(x2)\n","print(\"f(\", x2, \") =\", result2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WiqvOej1FklJ","executionInfo":{"status":"ok","timestamp":1690037644316,"user_tz":-330,"elapsed":754,"user":{"displayName":"khushi pant","userId":"00791529304222923768"}},"outputId":"a4e01176-ab20-4abe-9e2c-f4ffef1804f2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["f( 2 ) = 6\n","f( 1 ) = 0\n"]}]},{"cell_type":"markdown","source":["Problem 3\n","A list contains the average daily temperature(in degree Celsius) of a city over a particular week. Write a Python code to swap the highest and the lowest temperatures\n","\n","a) A list containing average daily temperature over a week\n","temperatures = [34, 40, 29, 33, 42, 37, 39 ]\n","\n","b) The expected output\n","\n","\n","\n","c)Store the highest temperature\n","\n","\n","d) Index of the element with the highest temperature\n","max_temp_index =\n","\n","\n","e) Store the lowest temperature\n","min_temp =\n","\n","f) Index of the element with the lowest temperature\n","min_temp_index =\n"],"metadata":{"id":"Q40MHjGxF8-e"}},{"cell_type":"code","source":["# Given list of average daily temperatures over a week\n","temperatures = [34, 40, 29, 33, 42, 37, 39]\n","\n","# Find the index of the maximum and minimum temperatures\n","max_temp_index = temperatures.index(max(temperatures))\n","min_temp_index = temperatures.index(min(temperatures))\n","\n","# Store the highest and lowest temperatures\n","max_temp = max(temperatures)\n","min_temp = min(temperatures)\n","\n","# Swap the highest and lowest temperatures\n","temperatures[max_temp_index], temperatures[min_temp_index] = temperatures[min_temp_index], temperatures[max_temp_index]\n","\n","# Print the updated list with highest and lowest temperatures swapped\n","print(\"Updated temperatures list with highest and lowest temperatures swapped:\")\n","print(temperatures)\n","\n","# Print the highest and lowest temperatures, and their respective indices\n","print(\"Highest temperature:\", max_temp)\n","print(\"Index of the element with the highest temperature:\", max_temp_index)\n","print(\"Lowest temperature:\", min_temp)\n","print(\"Index of the element with the lowest temperature:\", min_temp_index)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7tk7F6BEGVDq","executionInfo":{"status":"ok","timestamp":1690039163551,"user_tz":-330,"elapsed":570,"user":{"displayName":"khushi pant","userId":"00791529304222923768"}},"outputId":"ef392d7e-024d-4ac4-bb43-f445975c9c9c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Updated temperatures list with highest and lowest temperatures swapped:\n","[34, 40, 42, 33, 29, 37, 39]\n","Highest temperature: 42\n","Index of the element with the highest temperature: 4\n","Lowest temperature: 29\n","Index of the element with the lowest temperature: 2\n"]}]},{"cell_type":"markdown","source":["problem 4\n","\n","Calculate the median price\n","\n","a) Step 1 - Obtain the sorted list\n","\n","b)Check if the number of elements in the list is even or odd\n","\n","c)Use the corresponding formula to calculate the median and print the median\n","\n","d) Check which is greater, mean or median"],"metadata":{"id":"8LPdGmCzHLlE"}},{"cell_type":"code","source":["prices = [350, 400, 500, 600, 300, 450, 550, 250]\n","\n","\n","sorted_prices = sorted(prices)\n","\n","\n","num_elements = len(sorted_prices)\n","is_even = num_elements % 2 == 0\n","\n","#  Calculate the median\n","if is_even:\n","\n","    median_index_1 = num_elements // 2 - 1\n","    median_index_2 = num_elements // 2\n","    median = (sorted_prices[median_index_1] + sorted_prices[median_index_2]) / 2\n","else:\n","\n","    median_index = num_elements // 2\n","    median = sorted_prices[median_index]\n","\n","\n","print(\"Median price:\", median)\n","\n","\n","mean = sum(prices) / len(prices)\n","print(\"Mean price:\", mean)\n","\n","\n","if mean > median:\n","    print(\"Mean price is greater than the median.\")\n","elif mean < median:\n","    print(\"Median price is greater than the mean.\")\n","else:\n","    print(\"Mean and median prices are equal.\")"],"metadata":{"id":"isTna4sVIBsM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Problem 5\n","Having a nested list sometimes might be a bit problematic. An individual was asked to collect the names of companies in the technology sector.\n"," While creating the list, by mistake the last three companies were subsumed in a list as shown below. You are required to get rid of the nesting\n","\n","a)The list of tech companies curated by the individual\n","tech_companies = ['Qualcomm','Google','Apple',['Nvidia','Cisco','Samsung']]\n"],"metadata":{"id":"2_kC1q9XL6Ix"}},{"cell_type":"code","source":["\n","tech_companies = ['Qualcomm', 'Google', 'Apple', ['Nvidia', 'Cisco', 'Samsung']]\n","\n","# Flatten the list\n","flattened_tech_companies = tech_companies[:3] + tech_companies[3]\n","\n","print(\"Flattened list of tech companies:\", flattened_tech_companies)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FJ95-7wKMCif","executionInfo":{"status":"ok","timestamp":1690039257234,"user_tz":-330,"elapsed":417,"user":{"displayName":"khushi pant","userId":"00791529304222923768"}},"outputId":"720a351f-c2a1-40f1-b2e9-211156169ffa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Flattened list of tech companies: ['Qualcomm', 'Google', 'Apple', 'Nvidia', 'Cisco', 'Samsung']\n"]}]},{"cell_type":"markdown","source":["Problem 6\n","Another measure of average\n","Mode is defined as the value that appears most often in a set of data values. Mode corresponds to the most frequent value.\n","You are given a list of numbers and you need to calculate the mode of this list.\n","\n"," A list containing average daily temperature over 10 days\n","temperatures = [34, 40, 29, 33, 42, 40, 39, 34, 34,33 ]\n","\n"],"metadata":{"id":"dtJVFSr_MJR-"}},{"cell_type":"code","source":["import statistics\n","\n","# Given list of average daily temperatures over 10 days\n","temperatures = [34, 40, 29, 33, 42, 40, 39, 34, 34, 33]\n","\n","# Calculate the mode of the list\n","mode_temperature = statistics.mode(temperatures)\n","\n","# Print the mode of the list\n","print(\"Mode of the temperatures list:\", mode_temperature)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F76tCAu1MNZ4","executionInfo":{"status":"ok","timestamp":1690039308371,"user_tz":-330,"elapsed":443,"user":{"displayName":"khushi pant","userId":"00791529304222923768"}},"outputId":"3f73d748-44a2-4948-ef02-5f138c044e90"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mode of the temperatures list: 34\n"]}]},{"cell_type":"markdown","source":["Problem 7 - numpy\n","Construct a 2-D  10∗10  matrix with the following constraints:\n","The element at  [0,0]  should be 1\n","The element at  [0,9]  should be 100\n","The element at  [9,0]  should be 50\n","The interval between elements in rows should be constant\n","The interval between elements in columns should be constant"],"metadata":{"id":"VYfDOBaTMYJF"}},{"cell_type":"code","source":["import numpy as np\n","\n","matrix = np.zeros((10, 10), dtype=int)\n","\n","matrix[0, 0] = 1\n","matrix[0, 9] = 100\n","matrix[9, 0] = 50\n","\n","\n","row_interval = (matrix[0, 9] - matrix[0, 0]) / (10 - 1)\n","column_interval = (matrix[9, 0] - matrix[0, 0]) / (10 - 1)\n","\n","for i in range(1, 10):\n","    matrix[0, i] = matrix[0, i - 1] + row_interval\n","    matrix[i, 0] = matrix[i - 1, 0] + column_interval\n","    for j in range(1, 10):\n","        matrix[i, j] = matrix[i, 0] + j * row_interval\n","print(\"Constructed 10x10 matrix:\")\n","print(matrix)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T2zCuU_EMclh","executionInfo":{"status":"ok","timestamp":1690039362623,"user_tz":-330,"elapsed":4,"user":{"displayName":"khushi pant","userId":"00791529304222923768"}},"outputId":"c1ad7fd6-356f-4e9b-9ae7-263db5176075"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Constructed 10x10 matrix:\n","[[  1  12  23  34  45  56  67  78  89 100]\n"," [  6  17  28  39  50  61  72  83  94 105]\n"," [ 11  22  33  44  55  66  77  88  99 110]\n"," [ 16  27  38  49  60  71  82  93 104 115]\n"," [ 21  32  43  54  65  76  87  98 109 120]\n"," [ 26  37  48  59  70  81  92 103 114 125]\n"," [ 31  42  53  64  75  86  97 108 119 130]\n"," [ 36  47  58  69  80  91 102 113 124 135]\n"," [ 41  52  63  74  85  96 107 118 129 140]\n"," [ 46  57  68  79  90 101 112 123 134 145]]\n"]}]},{"cell_type":"markdown","source":["Problem 8  - numpy\n","Construct a list of first 100 natural numbers.Create a two dimensional array with 10 rows and whose each row contains 10 columns and each number in this array is the square of the number from your constructed list.\n","For example : [[1,4,9,...,100],[121,144,...],......,"],"metadata":{"id":"6UVCA-KPMjUr"}},{"cell_type":"code","source":["import numpy as np\n","\n","first_100_numbers = list(range(1, 101))\n","\n","array_10x10 = np.array(first_100_numbers).reshape(10, 10)\n","\n","squared_array = array_10x10 ** 2\n","\n","print(\"Constructed 10x10 matrix with squared elements:\")\n","print(squared_array)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_u7RddW_Mssx","executionInfo":{"status":"ok","timestamp":1690039425420,"user_tz":-330,"elapsed":599,"user":{"displayName":"khushi pant","userId":"00791529304222923768"}},"outputId":"a198ab25-83f3-4334-ba7f-7e0a774cf442"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Constructed 10x10 matrix with squared elements:\n","[[    1     4     9    16    25    36    49    64    81   100]\n"," [  121   144   169   196   225   256   289   324   361   400]\n"," [  441   484   529   576   625   676   729   784   841   900]\n"," [  961  1024  1089  1156  1225  1296  1369  1444  1521  1600]\n"," [ 1681  1764  1849  1936  2025  2116  2209  2304  2401  2500]\n"," [ 2601  2704  2809  2916  3025  3136  3249  3364  3481  3600]\n"," [ 3721  3844  3969  4096  4225  4356  4489  4624  4761  4900]\n"," [ 5041  5184  5329  5476  5625  5776  5929  6084  6241  6400]\n"," [ 6561  6724  6889  7056  7225  7396  7569  7744  7921  8100]\n"," [ 8281  8464  8649  8836  9025  9216  9409  9604  9801 10000]]\n"]}]}]}